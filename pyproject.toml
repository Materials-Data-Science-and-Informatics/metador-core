[tool.poetry]
# ---- DO NOT EDIT, managed by somesy ----
name = "metador-core"
version = "0.1.0"
description = "Core of Metador, the metadata-first research data management framework."
authors = ["Anton Pirogov <a.pirogov@fz-juelich.de>"]
license = "MIT"
repository = "https://github.com/Materials-Data-Science-and-Informatics/metador-core"
homepage = "https://github.com/Materials-Data-Science-and-Informatics/metador-core"
documentation = "https://github.com/Materials-Data-Science-and-Informatics/metador-core"
keywords = ["metadata", "rdm", "FAIR", "framework", "python"]
# ----------------------------------------
readme = "README.md"
classifiers = [
    "Operating System :: POSIX :: Linux",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Scientific/Engineering",
    "Typing :: Typed",
]

# the Python packages that will be included in a built distribution:
packages = [{include = "metador_core", from = "src"}]

# always include basic info for humans and core metadata in the distribution,
# include files related to test and documentation only in sdist:
include = [
  "*.md",
  "LICENSE", "LICENSES", ".reuse/dep5",
  "CITATION.cff", "codemeta.json",
  { path = "mkdocs.yml", format = "sdist" },
  { path = "docs", format = "sdist" },
  { path = "tests", format = "sdist" },
]
maintainers = ["Anton Pirogov <a.pirogov@fz-juelich.de>"]

[tool.poetry.dependencies]
python = "^3.8"
h5py = "^3.8.0"
typing-extensions = "^4.6.0"
runtype = "^0.3.5"
pydantic = "^1.10.12"
pydantic-yaml = "^1.1.1"
importlib-metadata = "^4.11.4"
wrapt = "^1.14.1"
rdflib = "^6.2.0"
isodate = "^0.6.1"
Pint = "^0.21"
Pillow = "^9.1.1"
python-magic = "^0.4.25"
pandas = "^1.4.1"
overrides = "^7.0.0"
simple-parsing = "^0.0.20"
phantom-types = "^2.1.0"
panel = "^0.14.0"
Flask = "^2.1.3"

[tool.poetry.group.dev.dependencies]
poethepoet = "^0.19.0"
pre-commit = "^2.17.0"
pytest = "^7.0.1"
pytest-cov = "^4.1.0"
hypothesis = "^6.58.0"
frozendict = "^2.3.4"
# somesy = {path = "../somesy", develop = true}

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.2"
mkdocstrings = {extras = ["python"], version = "^0.21.2"}
mkdocs-material = "^9.1.6"
mkdocs-gen-files = "^0.4.0"
mkdocs-literate-nav = "^0.6.0"
mkdocs-section-index = "^0.3.5"
mkdocs-macros-plugin = "^0.7.0"
markdown-include = "^0.8.1"
pymdown-extensions = "^10.0"
markdown-exec = {extras = ["ansi"], version = "^1.6.0"}
mkdocs-coverage = "^0.2.7"
mike = "^1.1.2"
anybadge = "^1.14.0"
black = "^23.7.0"
mkdocs-jupyter = "^0.24.2"

[tool.poetry.plugins.metador_plugingroup]
# Metador supports defining custom validated plugin groups.
# Here we define the default entities used in Metador.
# For each declared group, plugins can be defined via entrypoints.
'schema__0.1.0' = "metador_core.schema.pg:PGSchema"
'harvester__0.1.0' = "metador_core.harvester:PGHarvester"
'packer__0.1.0' = "metador_core.packer:PGPacker"
'widget__0.1.0' = "metador_core.widget:PGWidget"

[tool.poetry.plugins.metador_schema]
# Metador is build around pluggable metadata schemas.
# This one is mandatory for containers packed by a packer plugin:
'core.packerinfo__0.1.0' = "metador_core.packer:PackerInfo"
# These are optional and can be used freely, e.g. by some packer:
'core.file__0.1.0' = "metador_core.schema.common.rocrate:FileMeta"
'core.dir__0.1.0' = "metador_core.schema.common.rocrate:DirMeta"
'core.bib__0.1.0' = "metador_core.schema.common:BibMeta"
'core.imagefile__0.1.0' = "metador_core.schema.common:ImageFileMeta"
'core.table__0.1.0' = "metador_core.schema.common:TableMeta"
# This one needed for configuring the generic dashboard for a container:
'core.dashboard__0.1.0' = "metador_core.widget.dashboard:DashboardConf"

[tool.poetry.plugins.metador_harvester]
'core.file.generic__0.1.0' = "metador_core.harvester.common:FileMetaHarvester"
'core.imagefile.dim__0.1.0' = "metador_core.harvester.common:ImageFileMetaHarvester"

[tool.poetry.plugins.metador_widget]
'core.file.text.md__0.1.0'    = "metador_core.widget.common:MarkdownWidget"
'core.file.text.html__0.1.0'  = "metador_core.widget.common:HTMLWidget"
'core.file.text.code__0.1.0'  = "metador_core.widget.common:CodeWidget"
'core.file.text__0.1.0'  = "metador_core.widget.common:TextWidget"
'core.file.json__0.1.0'  = "metador_core.widget.common:JSONWidget"
'core.file.pdf__0.1.0'   = "metador_core.widget.common:PDFWidget"
'core.file.image__0.1.0' = "metador_core.widget.common:ImageWidget"
'core.file.audio__0.1.0' = "metador_core.widget.common:AudioWidget"
'core.file.video__0.1.0' = "metador_core.widget.common:VideoWidget"

[tool.poetry.plugins.metador_packer]
'core.generic__0.1.0' = "metador_core.packer.example:GenericPacker"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# NOTE: You can run the following with "poetry poe TASK"
[tool.poe.tasks]
init-dev = { shell = "pre-commit install" }
lint = "pre-commit run"  # pass --all-files to check everything
test = "pytest"  # pass --cov to also collect coverage info
docs = "mkdocs build"  # run this to generate local documentation
licensecheck = "licensecheck"  # run this when you add new deps

# Tool Configurations
# -------------------

# pytest.ini replacement (pytest >= 6.0)
[tool.pytest.ini_options]
addopts = "--cov-report=term-missing:skip-covered"
filterwarnings = [
    "ignore::DeprecationWarning:bokeh.core.*",
]

[tool.coverage.run]
source = ['metador_core']

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
ignore = ["E501", "W503", "E712"]
max-line-length = 88

[tool.pydocstyle]
ignore = [
  # custom:
  "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",
  # google "convention" ignore list:
  "D203"," D204"," D213"," D215",
  "D400", "D401", "D404", "D406", "D407", "D408", "D409", "D413",
]

[tool.interrogate]
fail-under = 95

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101"]

[tool.licensecheck]
using = "poetry"
